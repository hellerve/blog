{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T16:56:45.653873-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T16:57:59.852822-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "hDvSO9v6DQCPIyg7Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It is time for Sudoku, once more (we are more than half-way through)! In case you are new here, this is a series about building six different Sudoku solvers in six different programming languages. [Check the first part](https://blog.veitheller.de/Six_Simple_Sudoku_Solvers_I:_Python_(Reference).html) for more information on the algorithm as well as a reference implementation."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T16:57:38.90905-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:03:26.126376-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "w8r+Ptv6DQCQtVvEDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Today we’re going to look at Haskell, including types, monads, the whole thing. We’re going to look at monadic states, internal mutation, and laziness as a backtracking mechanism."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:03:38.64794-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:45:20.505288-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Bl4EVNv6DQCWJw6VDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As with Common Lisp and Prolog, it won’t necessarily be a good primer for the language, and I suggest following all the rabbit holes you can find if you want to dig deeper; it’s a rewarding if a little exhausting exercise."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:08:31.031897-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:08:35.060216-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "AmzdZdv6DQCcsWqZDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Why Haskell?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:08:35.99925-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:11:40.019546-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7jgpZtv6DQCdALfnDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Haskell is mostly known for being a language with an advanced type system and for the scary word “monads”. In my opinion, that’s a pity. Haskell is a deeply elegant weapon, designed for sharp problems of all shapes and sizes, and while it doesn’t necessarily produce aesthetically pleasing solutions, it makes damn sure it doesn’t get into your way if you want to follow your stylistic intuitions."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:11:43.335408-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:14:25.122674-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "rPgscdv6DQCn1jsQDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Apart from that, however, it also has more substantive qualities that lend themselves well to algorithms like Sudoku solvers:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:14:26.427462-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:45:31.876469-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0VgMe9v6DQCr4EvmDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- **Laziness**. Haskell expressions only get evaluated when they’re actually used. This is cool, powerful, and sometimes a nightmare to debug. In this case, we will use it to short-circuit our backtracking once we’ve found a solution, and I just think that’s awesome.\n- **Algebraic combinators**. Haskell is combinator-heavy. This one is somewhat hard to explain, but it’s abundance of algebraic combinators make it easy to express things like searches and constraints, and we’ll make lots of use of it.\n- **Applicatives, Monads, Category Theory**. We’ll use both Applicatives and Monads today—for control flow and state, respectively—, and that’s only the tip of the iceberg! These concepts are scary and the names don’t help, but they are definitely worth a look, and I’ll try my best to demystify the small bits we’ll be using today."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:19:33.68301-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:20:56.308641-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "XLFcjdv6DQC9+UxlDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I hope those things are enough to make a compelling case for why Haskell is worth a look. And, once again, our solver will be less than 100 lines of code (we could golf it down more, but that would defeat the purpose)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:15:22.113697-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:16:28.435593-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "m+8YAt76DQCOonVEDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I do want to warn you that there would be a much simpler way to solve this in Haskell, but I simply could not resist the urge to show how internal mutation is still a possibility in a language that has the reputation of being the most pure used in industry."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:20:59.104807-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:21:09.07397-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LB90ktv6DQCDGxf8Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## The solver"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:21:09.367983-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:05:32.047415-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "U7gQk9v6DQCDdOSCDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As always, we’ll start with the main solver. As with most of our solutions except for Prolog, we’ll then look at propagation, candidates, and MRV search."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:26:13.837413-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:27:04.517233-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "G482pdv6DQCQ7lYoDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Before we do so, however, we’ll define a type alias to feel comfortable when looking at types."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:26:36.525353-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:27:13.817397-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "PMGQptv6DQCS4bsgDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\ntype Board = [[Int]]\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:27:22.213641-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:27:38.023942-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "dmoZqdv6DQCUES7xDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This is, of course, not strictly necessary, but it makes things a bit more intuitive to look at."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:22:35.789385-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:22:44.240721-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bGk3mNv6DQCHsZ+gDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### The main entrypoint"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:22:45.934279-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:23:16.34998-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "DzXSmNv6DQCIKPvsDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The main `solve` function is deceptively short, but quite involved."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:23:18.302721-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:23:44.81771-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TBzAmtv6DQCJe3SjDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\nsolve :: Board -> Maybe Board\nsolve b0 = do\n  b <- propagate b0\n  if solved b\n  then pure b\n  else\n    let ((i,j), cs) = findMRV b\n    in foldr (<|>) empty [ solve (set b i j v) | v <- cs ]\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:27:42.566333-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:29:38.024561-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pXKAqtv6DQCWLCYhDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The type declaration of the function here is above the function definition. It tells us that we give the function a `Board`, and we get a `Maybe Board`—equivalent to `Option(Board)` in other languages—back. `Maybe` is a type with multiple constructors—in Haskell, we refer to these as sum types—, with the constructors `Just value` or `Nothing`. The former transports a value, the latter shows the absence of a value. It’s an explicit way of demarking return value optionality."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:23:49.518206-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:26:03.67683-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "t2ycnNv6DQCJxSJ1Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "First we’ll call our usual propagation (by now you should have an idea what that means), and check if we’ve solved the puzzle. If yes, we’ll return the solution. If no, we’ll get all the candidates and use `foldr`—algebra speak for `reduce` or `inject:into:`—to iterate over them."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T17:26:06.52238-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T18:29:42.749682-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "5O7GpNv6DQCQNhbEDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Now, this is our first bit of magic. How do we iterate over them? How do we short-circuit? What is this whole fold line?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T18:29:22.802843-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:52:14.131115-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+D6Rs9v6DQCh2TfMDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I already teased laziness in the beginning, and this is where it get’s crucial. For every candidate, we insert it (`set b i j v`) and plug it into `solve`. This is a list comprehension akin to what you might find, for instance, in Python. We then take the resulting list and plug it into `foldr`, using `<|>`  as a fold function, and `empty` (which is implemented by `Maybe` as `Nothing`) as a first accumulator."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:00:12.456625-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:46:45.040168-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "D7Xgy936DQCw3b5ODhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "What does `<|>` do? It is the choice operator, and it comes from the `Alternative` type class, which is “a monoid on applicative functors”—in our case, simply a thing we can combine with other instances of that thing. You can think of it like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T18:32:18.610794-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:00:50.172515-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KTKIkdz6DQCriEjFDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\nempty      = Nothing\nNothing <|> r = r\nJust x  <|> _ = Just x\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:02:23.11388-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:02:23.11388-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+l2q0936DQC3r4odDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So, we’re just combining things and take the first `Just` value we find and stick with it. And because of laziness and the fact that the unused computations will never be performed, we end up with something akin to:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:00:53.020528-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:02:38.805884-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "f6RLzt36DQCxzsq4Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\nrecur []     = Nothing\nrecur (v:vs) =\n  case solve (set b i j v) of\n    Just s  -> Just s\n    Nothing -> recur vs\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:02:42.373567-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:49:51.332579-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7j/Q1N36DQC4CjVSDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "But a bit slicker and generic over all instances of the `Alternative` type class (think of it as an interface). You could also try swapping the fold for `asum` from `Data.Foldable` as an exercise, if you were so inclined."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:03:22.890548-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:05:19.688771-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "R3461936DQC6V4kVDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Propagation"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:04:46.327577-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:05:57.746831-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CaUz3N36DQC879oJDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Next, we’ll try to run a fill-in pass."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:05:58.483356-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:08:45.556024-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "dqeA4N36DQC+3byrDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\npropagate :: Board -> Maybe Board\npropagate b0 = runST $ do\n  a <- thawBoard b0\n  ok <- fixpoint a\n  if not ok then pure Nothing else Just <$> freezeBoard a\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:06:18.629121-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:50:51.915045-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "yAS04d36DQC/ExLFDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Again with the magic. This time we do it for performance reasons, however. We get internal mutation inside a monad called `ST` (State Threads) that we let execute with runST, so the outside world stays pure. I will, for the purposes of this post, ignore `thawBoard` and `freezeBoard`. They simple transform our nice little board into a dirty, mutable array encapsulated in said monad and back, so we can do our unclean mutations. If you do want to check it out, you can do so [by looking at the repo version](https://github.com/hellerve/sudoku/blob/main/sudoku.hs) or by going to the documentation of [`STUArray`](https://hackage.haskell.org/package/array-0.5.8.0/docs/Data-Array-Base.html#t:STUArray) directly. Our actual work happens in `fixpoint`, which will, as is tradition, mutate the board in place and return a marker whether the board is solvable."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:16:37.624126-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:17:21.060709-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "1CWZBt76DQCUI0WjDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\nfixpoint :: STUArray s (Int,Int) Int -> ST s Bool\nfixpoint a = go True\n  where\n    go ch = if ch then do\n               (ch', ok) <- sweep a\n               if not ok then pure False else go ch'\n             else pure True\n\nsweep :: STUArray s (Int,Int) Int -> ST s (Bool, Bool)\nsweep a = do\n  changed <- newSTRef False\n  ok <- newSTRef True\n  forM_ [0..8] $ \\i ->\n    forM_ [0..8] $ \\j -> do\n      v <- readArray a (i,j)\n      when (v == 0) $ do\n        cs <- candidatesST a i j\n        case cs of\n          []   -> writeSTRef ok False\n          [x]  -> writeArray a (i,j) x >> writeSTRef changed True\n          _    -> pure ()\n  (,) <$> readSTRef changed <*> readSTRef ok\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:17:27.362992-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:17:40.663954-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "cBqQCd76DQCUpE33Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Have you ever seen code so pretty? I kid, but let’s try it anyway."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:17:46.799648-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:21:35.87273-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FrO4Ct76DQCWHj4qDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The function `fixpoint` is our helper that will run passes over the board until it doesn’t change anymore. `sweep` is the function that actually performs that pass. Taking away all the state-fu, we are left with a function that has a marker for whether the board has been mutated this pass (`changed`) and a marker for whether it’s still solvable (`ok`). We then go into the nested loop, reading the value from the array, and checking for candidates for those that are still `0`. If we don’t find any, the board is unsolvable and we set `ok` to false. If we find exactly one candidate, we set the value and mark the pass as having changed something. Otherwise we do nothing."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:21:36.162215-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:22:48.30036-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "xntkGN76DQCls6T2Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So why is this so clumsy? This is what it looks like to try and write imperative code in a pure functional language. It is still safe and encapsulated, and the state remains local. But it’s a pain to deal with and to look at, as all state should be—I’m only partially joking."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:22:50.706321-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:22:58.300074-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "g+/VHN76DQCrYcHQDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "#### Finding candidates"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:22:58.944204-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:51:12.698514-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "rqZTHd76DQCr7NK3Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Next up, we’ll look at finding the individual candidates, which is done using `candidatesST` (the same `ST` as above, so you know it’ll be good)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:23:37.419638-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:25:48.46776-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "8bueH976DQCvC91vDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\ncandidatesST :: STUArray s (Int,Int) Int -> Int -> Int -> ST s [Int]\ncandidatesST a i j = do\n  usedR <- mapM (\\c -> readArray a (i,c)) [0..8]\n  usedC <- mapM (\\r -> readArray a (r,j)) [0..8]\n  let r0 = (i `div` 3) * 3\n  let c0 = (j `div` 3) * 3\n  usedB <- sequence [ readArray a (r,c)\n                    | r <- [r0..r0+2], c <- [c0..c0+2] ]\n  let used = filter (/=0) (usedR ++ usedC ++ usedB)\n  pure (digits \\\\ used)\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:23:59.361028-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:25:09.221052-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "oYjtIN76DQCvUKQdDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Where is the eye bleach?! Let’s try and figure it out."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:25:13.718591-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:47:09.677494-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4S+FAd76DQCOnvJjDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "`usedR` and `usedC` are the rows and columns, respectively. `usedB` is the block, and functions essentially the same way as in the other algorithms. We then add them together, filter out any `0`, and return the difference of `digits` (which is bound to `[1..9]`), so all the values we haven’t found."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:27:34.410933-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:40:24.254271-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "DfG+Ld76DQC34p7aDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Once again, bending Haskell to our will has worked, but left us with code that looks less than elegant. Let’s press on to resolve that issue!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:28:27.363433-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:28:44.336977-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "eu3mMN76DQC7FRA/Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Computing the MRV"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:28:45.731755-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:28:56.823493-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IzT/Md76DQC7gva0Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Finally, the candidates for our depth first search await!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:28:57.419271-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:38:55.408304-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0ouxMt76DQC8o8PiDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\nrow i b = b !! i\ncol j b = map (!! j) b\nbox i j b =\n  [ b !! r !! c | r <- [r0..r0+2], c <- [c0..c0+2] ]\n  where r0 = (i `div` 3) * 3; c0 = (j `div` 3) * 3\n\ncands b i j =\n  let v = b !! i !! j\n  in if v /= 0\n     then [v]\n     else digits \\\\ filter (/=0) (row i b ++ col j b ++ box i j b)\n\nfindMRV :: Board -> ((Int,Int), [Int])\nfindMRV b = minimumBy (comparing (length . snd))\n  [ ((i,j), cands b i j) | i <- [0..8], j <- [0..8], b !! i !! j == 0 ]\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:29:16.258995-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:29:49.074565-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "lwPRM976DQC82VBTDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "That’s more like it! Here, unencumbered by low-level array accesses, we can make Haskell’s combinators truly shine."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:29:50.64232-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:39:47.641726-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "76ndNd76DQC/Ji5yDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The heuristics are the same as before: we compute the candidates (that’s the list expression at the bottom there together with the functions at the top), and then get the result with the shortest list of candidates (`minimumBy . length` with extra steps)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:39:48.350683-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:40:58.101041-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Ivl9Wd76DQCGANi7Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It might seem awkward to basically redo all the candidate search we already did in the state monad, but here this was a deliberate choice to show you how mutable, efficient code looks like next to pure, slightly less efficient (though not by as much as you might think) code."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:40:59.063135-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:41:24.779357-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KvW0Xd76DQCMIfH0Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "But, as is tradition by now, we can now pat ourselves on the back: we’ve written a Sudoku solver!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:41:25.444807-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:41:28.807627-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CINHX976DQCOI5p0Dhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Fin"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:41:31.461894-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:42:31.720995-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wOp+X976DQCOTy9wDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Once again, we’ve tried to use a language to its fullest by showing off all the things it can do and is good for in a humble Sudoku solver, in under 100 lines of code. I might be slightly biased, but I think that’s kind of neat!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:42:33.671037-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-10T20:43:55.926806-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pIdYY976DQCToxthDhm7HA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Now, we might have dipped our toes in the waters of mutability and efficiency with this one, but in the next one we’ll take it up a notch by taking Rust through its paces, lettin’ ’er rip! Stay tuned!"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-10T16:56:55.554286-05:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-10T16:56:55.554286-05:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Six Simple Sudoku Solvers IV: Haskell"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "b2dbd13b-dbfa-0d00-8f22-f9640e19bb1c"
	}
}