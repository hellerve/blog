{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:14:16.953968+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:47:20.535694+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "fwjMz6fyDQCYWrQcDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "For a while now, one of my biggest responsibilities in [Glamorous Toolkit](https://gtoolkit.com) has been to develop [gt4llm](https://github.com/feenkcom/gt4llm), a workbench for large language models that is intended to help develop assistants and also comes with a set of integrated assistants for code, prose, and other subsystems with GT."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:19:11.45813+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:19:32.255325+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0MxZ4afyDQCgbejPDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I haven’t written much about the workbench outside of the Glamorous Toolkit book, and if you want to learn more about it, [I suggest reading there](https://book.gtoolkit.com/gt4llm-270ytb3y5mi1voswipfyc5hti). It has all the context I know to talk about<sup><a href=\"#1\">1</a></sup>."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:23:50.03442+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:41:41.746466+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "o4f08afyDQCpdkzRDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Instead, today I want to talk about a silly little idea that I had a long while back, and finally realized using the workbench: LlmL, the language that lets you shell out to an LLM when you don’t know how to solve a problem<sup><a href=\"#2\">2</a></sup>. Let’s start by looking at the language, and then talk a bit about the implementation, and see what we can learn from it. Beware that the implementation bit is written in GT-specific Smalltalk, but the code should be short and simple enough that the idea can get across."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:19:51.140228+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:04:34.093939+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qEy346fyDQCgzlhwDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "###  A really dumb language meets a really dumb idea"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:00:04.337196+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:01:09.62044+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "48ONc6jyDQCqvRbjDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The language \"design\" of LlmL was primarily shaped by the one hour timebox I set for myself when working on this project. As such, It only has numbers as types, and it uses an S-expression-based syntax (for ease of parsing)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:01:13.225886+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:01:16.570095+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "xeqod6jyDQCvn/8rDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Here is a sample:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:02:29.231018+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:02:36.344354+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "A6gwfKjyDQCwsyJpDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(def x\n\t(fn (n)\n\t\t(* n 2)))\n\t\t\r(+ (x 10) 3)\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:02:38.986745+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:02:50.894688+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "G4TFfKjyDQCw1Nn8DEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This should result in `23`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:02:53.219485+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:03:55.927182+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "HbSefajyDQCxjVVbDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So far, so simple. We have a language with functions, variables and numbers, using an S expression syntax. So, what is different?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:03:56.267596+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:04:19.857328+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "1L5ggajyDQC1EdOUDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Well, consider factorial. How would you usually write factorial in a language like that? Here is one way:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:04:20.384292+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:05:54.167182+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "n7zQgqjyDQC3N6W9DEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(def factorial\n\t(fn (n)\n\t\t(if (= n 0)\n\t\t\t1\n\t\t\t(* n (factorial (- n 1))))))\n\t\t\t\n(factorial 5)\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:05:54.348141+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:07:04.013581+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7YFqiKjyDQC6a6IJDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Except this wouldn’t work, because we don’t have `if` and conditionals and all that jazz. Instead of trying to implement all of that using Church encodings and fancy lambda calculus things<sup><a href=\"#3\">3</a></sup>, we can instead just call `infer`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:07:06.006471+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:07:30.664267+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CemvjKjyDQCAM0L7DEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(def factorial (infer))\r(factorial 5)\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:07:49.639308+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:07:58.697054+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "HrRJj6jyDQCAjkFlDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And it will give us the right answer, 120!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:07:59.909144+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:09:21.327469+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QWfmj6jyDQCBl8IEDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So, how does that work? Well, the basic idea was that in the age of just blindly copying a bunch of code that a language model generates and putting that in our code base, how about we just cut out the middleman and just ask it for the answer at runtime instead?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:09:22.694389+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:10:15.942507+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wpTVlKjyDQCG3Y0+DEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So, we give the LLM the name of the function as well as the arguments it was called with and ask it to generate an answer, and then pass that back into the interpreter. Cool, right?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:10:16.733227+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:49:33.552205+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "uTAOmKjyDQCMCsxYDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I think we just accidentally stumbled into the future, where solving problems is outsourced in real-time."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:10:29.187963+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:23:46.250754+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "BDvMmKjyDQCNGA9IDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### How do LlmL do?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:23:46.681544+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:24:09.719519+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "WwNVyKjyDQCbD3fCDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Now that we’ve talked about *what* LlmL is, let’s talk about how it works."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:24:12.234732+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:25:41.153608+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wOPayajyDQCczOXvDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The parser uses a framework called SmaCC that is used for virtually every parser in GT. It’s a parser generator framework and it’s quite awesome. Once you know how to wield it (which might take a bit), it takes something like 5-10 minutes to write a parser for something like LlmL that produces a neat little AST."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:25:44.550521+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:27:05.874502+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "S41bz6jyDQCkKHAsDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "From there, we build a simple evaluator that is just a tree-walking interpreter that keeps track of the variables in an environment and allows for environments to be pushed and popped as needed."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:27:29.484957+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:29:54.820689+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ydOH1ajyDQCoJM1mDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Really the only novel and mildly interesting bit is inside the evaluation for the `infer` primitive, which in turn happens in a class called {{gtClass:LlmlInfer}}.  Its method {{gtMethod:LlmlInfer>>#evaluate:in:}} is the key to the LLM connection."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:35:10.549087+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:51:12.038308+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "twEY8ajyDQC/C5QeDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It uses [structured outputs](https://openai.com/index/introducing-structured-outputs-in-the-api/) to guarantee that we always get a well-formed result. For those not in the know, it’s basically a way to make the LLM to adhere to a user-controlled JSON schema in the output."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:30:28.841095+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:49:07.421983+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TnhN4KjyDQCvdSSXDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "To transcribe it as a snippet and annotate, it basically does this:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:29:50.535141+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:36:28.503451+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "YfIE3qjyDQCvO6ODDEKk/Q=="
				},
				"code" : "\"A provider holds onto all the low-level bits and is different for every LLM API.\rCurrently we support Ollama, OpenAI, Anthropic, and Google Gemini.\rThese providers also understand how to add a structured output format to the API call.\"\rprovider := self connection buildProvider format: self format.\r\r\"Then we create a chat and send a message.\"\rchat := GtLlmChat new provider: provider.\rchat sendMessage: 'Provide the output of the following expression: '\r\t\t\t\t, aLlmlEvaluator callStack last source. \"We get the last section from the callstack here. It also has the arguments.\"\r\r\"These executions happen asynchronously, so we force synchronicity by waiting.\"\rchat provider executions last wait.\r\r\"We get the result from the JSON we got back and just confidently convert it to a number.\"\r(chat messages last contentJson at: 'result') asNumber"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:36:41.043319+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:48:56.288184+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "V9N89qjyDQCEBjlWDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Usually in `gt4llm`, the format that we would use would be autogenerated by a higher level schema, but I didn’t want to bother with it, so I just wrote a simple structured output format by hand:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:37:33.550131+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:37:39.304732+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qwae+ajyDQCHmLREDEKk/Q=="
				},
				"code" : "{'type' -> 'object'.\r\t'properties' -> {'result' -> {'type' -> 'number'} asDictionary} asDictionary.\r\t'required' -> {'result'}.\r\t'additionalProperties' -> false} asDictionary"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:37:55.3031+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:38:59.255339+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bvTp+qjyDQCHpi0MDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This won’t work with all providers because they are ever so slightly different in how they want their schema to be formatted. It does work with Ollama and OpenAI, though, and that was good enough for me here. For anything more, resort to the higher level."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:39:15.013458+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:40:25.122942+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Q0Xv/qjyDQCNcksnDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Still, the core of the system works with all providers we’ve provided in `gt4llm`, so whatever you set up as your default connection will be used by the evaluator by default. You can also override it to inject your own models or providers per evaluation:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:40:28.907266+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:40:43.408315+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "y8MRBKnyDQCUxVfFDEKk/Q=="
				},
				"code" : "LlmlEvaluator new\r\tconnection: (GtLlmConnection new\r\t\t\tprovider: GtOllamaProvider;\r\t\t\tmodel: 'llama3.2');\r\tevaluate: (LlmlParser\r\t\t\tparse: '(def factorial (infer)) (factorial 4)')"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:40:49.532673+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:40:57.61784+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "P3tMBanyDQCU6NfqDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And I think that’s all of it!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:40:58.610011+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:41:00.427723+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qv3WBanyDQCVw+TADEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Fin"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:42:29.88501+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:43:03.474808+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "67lHC6nyDQCcazbiDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I hope you enjoyed this little tour of my groundbreaking new research in programming language design!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:42:04.344469+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:45:05.150162+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "61/2BanyDQCV6qFcDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Okay, admittedly, LlmL is silly, but maybe not as silly as one might think at first glance: when people copy-paste code they found online or that an LLM spit out, what they actually want, at the heart of it, is an *oracle*. Someone to just tell them the answer. And instead of generating an algorithm that won’t be reviewed anyway, this just gives you the answer right away. But it’s also a reductio ad absurdum of this idea that, somehow, this will solve our problems, because it will not. It just creates the ultimate black box."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:51:49.417452+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:52:14.024739+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "l4ShLKnyDQCw4jInDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "LlmL, like many of my experiments, is a toy. It’s fun, but I don’t actually find its im"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:45:09.652242+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:46:14.904892+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "/5TNFKnyDQCo6jOvDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I really wanted to write a more philosophical article about LLMs, but I thought you deserved a bit of technical whimsy before that. I hope you liked the appetizer, the main course is to follow!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:19:43.284009+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:19:47.648161+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "DWs/46fyDQCgdlI7DEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##### Footnotes"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:19:47.784185+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:19:48.18272+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "cxeE46fyDQCgxQDgDEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "<span id=\"1\">1.</span> If you find anything missing, do not hesitate to contact me or [file an issue](https://github.com/feenkcom/gtoolkit/issues/)!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:21:33.553385+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T15:23:15.802626+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0/7R6afyDQClWqiADEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "<span id=\"2\">2.</span> For a more manual way of approaching problem solving, [read my last blog post](https://blog.veitheller.de/On_starting_hard_things.html)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:11:06.425584+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-05-29T16:23:28.566643+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+2kEm6jyDQCN2+HADEKk/Q=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "<span id=\"3\">3.</span> You couldn’t actually do that, either, because you’d have to start with a Church encoding instead of numbers to get to equality. If you have equality, it’s all smooth sailing from there."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-05-29T15:15:25.330865+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-05-29T15:20:44.764517+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "LlmL"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "7091cbcf-a7f2-0d00-9859-63e20c42a4fd"
	}
}