{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:25:10.648762-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:33:02.771671-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "zCd1dk77DQCbbO41D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In this tenth installment of [my series on Scheme macros](https://blog.veitheller.de/scheme-macros/), we will be looking at some meta macros—macros that make the act of writing macros easier and cleaner."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:26:32.606637-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:31:32.850278-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "dblXe077DQCe3sBdD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Specifically, we’re going to look at macros for the following:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:31:34.195327-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:33:41.923157-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "H5pRjU77DQCg6s3MD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- Defining simpler macros more cleanly using `defmacro`,\n- generating fresh symbols when we need them using `gensym`, and\n- ensuring single evaluation of, for instance, macro arguments using `once`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:33:51.296665-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:39:39.626476-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KpkHlU77DQCmp0MND+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "All of these are well-known macros and techniques, but we’ll be writing our own very simple implementations to gain an understanding of how an implementation like that could work. This means that for all of them, we are limiting their power. I’ll leave you with references to go deeper into a possible implementation for all of them. We’re not just going to scratch the surface, but we’re also not going caving today."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:41:56.674221-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:03:46.873262-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FN1rsk77DQC6PsDqD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As always, we’re going to use my little (mostly dead) Scheme dialect [zepto](https://github.com/zepto-lang/zepto) for the implementation, but all of this should be portable with small tweaks."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:39:40.532096-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:39:55.356452-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "HYNOqk77DQCxm7QsD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Act I: defining macros as a macro"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:39:56.155362-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:40:50.890191-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vOU8q077DQCyU5CPD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I’ve written more `define-syntax` macros than I can remember, and I still find them awkward to write and look at. I understand their power, but I still prefer a simpler function-like definition most of the time. Something like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:40:52.474514-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:41:29.178495-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7TmYrk77DQC3L053D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro my-when (test body ...)\n  (if test\n  \t(begin body ...)\n  \t#f))\n  \n(my-when #t (write \"hello\"))\n(my-when #f (write \"nope\"))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:41:31.048196-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:04:57.859624-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "dNfksE77DQC3ziP2D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It has less power, but also less overhead, and captures our intent. It’s perfect for simple macros with a single clause and without literal sets. Luckily, we can define this short-hand quite easily."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:42:57.258778-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:43:08.382508-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "f1EItk77DQC+OSHkD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define-syntax defmacro\n  (syntax-rules ()\n    ((_ name (args ...) form)\n      (define-syntax name\n        (syntax-rules ()\n          ((name args ...)\n            form))))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:43:09.801255-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:44:28.631414-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bLXHtk77DQC+ZW7OD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "If you’ve followed along for this entire series, this should read almost naturally. In case the nested `define-syntax` throws you off, however, here’s an explanation: we define a macro that takes its argument and splices it into another macro definition, such that we get this transformation:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:44:30.613497-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:46:29.138303-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "nc2Yu077DQCEQJ6KD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro my-when (test body ...)\n  (if test\n  \t(begin body ...)\n  \t#f))\n  \t\n; expands to\n \n(define-syntax my-when\n  (syntax-rules ()\n    ((my-when test body ...)\n      (if test\n        (begin body ...)\n        #f))))\n ```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:46:31.155662-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:46:59.847943-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "bR7Iwk77DQCHCj06D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It’s a nice little shorthand that makes reading the macro much easier!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:53:51.780249-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:58:03.202602-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "3oUL3U77DQCXjBp6D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "If you want to learn more about how someone could implement a “full definition” of this, I encourage you to take a look at [how Racket implements `define-macro`](https://github.com/racket/racket/blob/8f0f634de986fe7f7c511477bff89711c615711a/racket/src/ChezScheme/examples/compat.ss#L204)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:46:53.536726-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:47:09.991728-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "c6MdxE77DQCIZ7wfD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Act II: generating symbols"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:47:10.726233-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:50:40.751099-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KO4jxU77DQCJBtD7D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Sometimes, we just need to generate a unique identifier. Macro hygiene handles this for us, but occasionally we will need to splice in an identifier into a piece of syntax. In a lot of Lisps, that is exactly what `gensym` does."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:50:45.506107-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:51:12.564027-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "mzLx0U77DQCOqmjQD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro x () (gensym))\n\n(write (x))\n(write (x))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:51:13.510751-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:51:40.544106-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "UIec0077DQCPDZV3D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The identifier printed out should be unique across calls to `x`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:51:41.734939-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:51:52.650339-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "5jBL1U77DQCQjUmpD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Again, we can implement this quite simply with a counter:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:52:02.450204-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:52:08.606084-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "q0WH1k77DQCRrgwWD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define gensym-prefix \"GENSYM-\")\n(define gensym-counter 1000)\n\n(defmacro gensym ()\n  (begin\n    (set! gensym-counter (+ gensym-counter 1))\n    (string->symbol (++ gensym-prefix (->string gensym-counter)))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T10:52:09.359497-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:06:57.135526-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Vbbw1k77DQCR2ln2D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Here, too, our newly minted `defmacro` makes things quite readable and short. All we do is increment our counter, append it to a prefix, and return the resulting symbol. It’s not exactly the cleanest code, but it approximates what every implementation of `gensym` does, including [the implementation for Carp by yours truly](https://github.com/carp-lang/Carp/blob/master/core/Gensym.carp)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:02:22.681143-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:05:27.573206-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "CYmmqFD7DQC4VKGQD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In zepto, compile time and runtime are not separated and thread safety is not an issue, so this is fine. In other languages, this might be a bit more of a problem, which is why they choose a different implementation path."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:01:11.18728-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:03:13.956637-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ayQF3E77DQCXiM+aD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "For instance, [in Racket this is implemented in C](https://github.com/racket/racket/blob/8f0f634de986fe7f7c511477bff89711c615711a/racket/src/bc/src/symbol.c#L980), although it does essentially the same thing. Still, reading small definitions like these are good exercises to understand a virtual machine’s implementation, so if you are interested in how a Scheme might be implemented in C, this might help."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:02:26.767966-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:02:41.15323-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aJu9+077DQCiMI9+D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Act III: ensuring single execution"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:02:41.666955-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:05:02.025058-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vvWg/E77DQCjAW/xD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Macros have the inherent problem of dealing with syntax and thus behaving differently than we are used to from functions. Consider this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:05:03.726381-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:01:34.668388-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "O50YBU/7DQCm937dD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro square (x)\n  (* x x))\n\t\n(macro-expand '(square (+ 1 5)))\n; => (* (+ 1 5) (+ 1 5))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:06:11.05868-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:06:36.189485-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Xyz+B0/7DQCo4HvyD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Already we are duplicating work. Occasionally we’d like to be able to ensure a piece of code is really just evaluated once. Something like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:06:36.75268-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:08:43.673703-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FxWkCk/7DQCs0XZ1D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro square (x)\n  (once (x)\n    (* x x)))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:08:48.171734-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:12:23.541172-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LF55Ek/7DQCuKENFD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This macro is a classic known originally as `once-only`, implemented by the brilliant Peter Norvig. I first learned about it in the book [Let over Lambda](https://letoverlambda.com/index.cl/guest/chap3.html#sec_6) by Doug Hoyte."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:12:25.334151-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:31:36.351695-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qQNrH0/7DQCyNxtjD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Now, unfortunately we cannot do this in Scheme, since it would break hygiene, so we’d have to rely on something like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:31:37.96894-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:33:44.455161-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TtMeZE/7DQC0sRpWD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define-syntax once\n  (syntax-rules ()\n    ((_ ((t1 e1) (t2 e2) ...) body ...)\n     (let ((t1 e1) (t2 e2) ...) body ...))))\n\n(defmacro square (s)\n  (once ((t s))\n    (* t t)))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:32:25.753893-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T13:05:57.148588-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "cPf3Zk/7DQC1ZDFvD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Since this is boring and essentially boils down to a small wrapper around `let`, I believe we can do better if we are willing to throw hygiene under the bus and `eval` our way to success! This is left as an exercise to the reader."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:56:42.048155-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:57:38.69124-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ljzFvU/7DQC+Fa//D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "But fret not! We will still explore this macro, just in a setting that is more suited to it and where hygiene is not a concern. I’ll reach for Carp, but you might just as well look at it in Common Lisp or Clojure."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:34:15.987378-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:45:53.735883-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Pv+JbU/7DQC4ZYXuD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defndynamic replacerfn [arg]\n  [(gensym) arg])\n\n(defndynamic generate-let [acc replacer]\n  (append acc [(list 'quote (car replacer)) (cadr replacer)]))\n\n(defndynamic generate-reverse-let [acc replacer]\n  (append acc [(cadr replacer) (list 'quote (car replacer))]))\n\n(defmacro defmacro! [name args body]\n  (let [replacer (map replacerfn args)]\n      (eval\n        `(defmacro %name %args\n          %(list 'list '(quote let) (reduce generate-let [] replacer)\n            (list 'let (reduce generate-reverse-let [] replacer)\n                body))))))\n\n(defmacro! square [y] `(* %y %y))\n\n(eval (square (do (macro-log \"hi\") 10))) ; will print \"hi\" once\n\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T11:50:30.319556-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:45:04.182999-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TR+dp0/7DQC4qRDID+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A few years ago, I implemented a version of this with a few more capabilities [for a talk at the Recurse Center](https://github.com/hellerve/talks/blob/45d68eeb969ca3e11063f7df767e4222e3dbe657/recurse-february-2021/examples.carp#L41-L49). The version here is derived from that. For `once`, attacking the code from various angles can help you get a bite on it."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:45:09.093745-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:45:48.085702-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "VTwLa1D7DQCOOlkcD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This version essentially bakes `once` into the definition of `defmacro`, making our macro more robust against re-evaluation."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:34:10.541599-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:48:09.508621-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+4nKQ1D7DQCGuyDzD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Nonetheless, I will explain it to you. It essentially relies on a two-way binding at different times. Let’s go by evaluation order instead of definition order. The inner `let` will be evaluated first. It binds all symbols to their respective gensyms. This will then be evaluated to rewrite the body—every occurrence of the original variable will be replaced by the gensym."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:48:09.9608-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:50:41.479165-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "kw7TdVD7DQCXA4IiD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let’s illustrate it (this is not exactly what happens, but might help with the intuition:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:48:20.122161-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:51:05.495928-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FhtudlD7DQCXsdcOD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n; original pass:\n(defmacro! square [y]\n  `(* %y %y))\n  \n ; first pass:\n (defmacro square [y]\n   (let [y 'gensym-symbol]\n     `(* %y %y)))\n     \n ; evaluated first pass:\n (defmacro square [y]\n  `(* %gensym-symbol %gensym-symbol))\n  ```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:50:43.202374-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:51:35.598988-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TVb1flD7DQCdqYiPD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In the second pass, the outer `let` kicks in. It will be added to the definition rather than executed, and will bind the generated symbols to the original variable:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:51:38.765767-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:52:31.772499-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "5ytFglD7DQChO0+ED+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n (defmacro square [y]\n  `(* %gensym-symbol %gensym-symbol))\n  \n ; expanded:\n (defmacro square [y]\n   (let [gensym-symbol y]\n    `(* %gensym-symbol %gensym-symbol)))\n ```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:52:32.951421-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:53:05.703574-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "pPh/hVD7DQCi6GvwD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And this is the code we finally end up with, ensuring that `y` will only be evaluated once, stored in a variable, and then rewritten."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:53:06.105963-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:54:57.83603-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "q+B5h1D7DQCl1f/8D+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "If this was a bit much, don’t fret! This macro is often described as one of the pinnacles of the craft, and Peter Norvig wrote “If you can understand how to write and when to use once-only, then you truly understand macros.” It’s a macro worth studying, but one that feels slippery even after you’ve implemented it a few times in various languages."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:54:01.205864-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:55:01.815954-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "yqHCilD7DQCoXgruD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Fin"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:55:02.759587-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:55:50.536043-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "md1tjlD7DQCr8JquD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And that concludes today’s session on macros! We’re getting into truly advanced territory now, implementing macros to make writing macros more convenient."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:55:58.412961-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:56:38.313922-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "S7hYkVD7DQCvbgvvD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I hope you enjoyed this session, I know I did! These macros are near and dear to my heart, and each one represents another layer of the macro onion unpeeled!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:56:40.307348-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-16T12:57:19.984259-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "h1Q+lFD7DQCzpSUcD+G2PA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let me know whether you liked this one, and if you have any more macro or language feature requests! I’ll be sure to put it in the backlog! See you around!"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-16T10:25:24.549103-05:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-16T10:25:24.549103-05:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Scheme Macros X: Meta macros"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "ffa67476-4efb-0d00-9b6b-78f00fe1b63c"
	}
}