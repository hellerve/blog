{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:21:06.41745-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:22:29.54662-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "O2M29zv7DQC4zvyCAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It’s been six and a half years since my last installment [in my series on Scheme macros](https://blog.veitheller.de/scheme-macros/), and I thought it was high time for another one."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:23:24.83884-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:24:03.43245-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "hjNk/zv7DQC8EyMbAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "If you’re new here (or, you know, you’ve only been around for the last six years and haven’t looked at the backlog), in this series we implement things usually reserved for language features as Scheme macros."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:24:04.913268-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:08:06.360246-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FQDaATz7DQCA70K6AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I haven’t written a Scheme macro in years. The last big one I’ve written is probably for my contribution to the paper [“Efficient module-level dynamic analysis for dynamic languages with module recontextualization”](https://dl.acm.org/doi/10.1145/3468264.3468574), and that was four years ago and using Racket. Time to combat atrophy, and do something cool! I dusted off [zepto](https://github.com/zepto-lang/zepto), the Scheme I built a decade or so ago, and got to work (to my surprise, it even compiled after some minor GHC-mandated updates)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:25:36.262886-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:30:45.62773-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "iORLBzz7DQCGf88BAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I decided it is time to implement algebraic data types (ADTs, also known as sum types), i.e. types with multiple constructors, and a pattern matching API to go with it, all in about 27 lines of code. But be warned, it’s pretty dense!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:26:50.158227-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:26:52.275484-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GnOzCzz7DQCM8HodAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## An API"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:26:52.755641-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:27:14.502454-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "XBXbCzz7DQCNIcjQAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "First, let’s look at an API we want to implement. We want to be able to define a type like so:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:27:15.604954-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:27:34.924269-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Orw3DTz7DQCPQYMVAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defadt Expr\n  (Lit n)\n  (Add x y)\n  (Mul x y))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:28:24.071213-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:28:52.902207-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "y25METz7DQCSzpmEAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This defines a type `Expr` that knows how to construct literals, add, and multiply. An expression calculator could then look like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:29:02.454749-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:29:06.283831-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "SyGWEzz7DQCVdeB6AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define (eval-expr e)\n  (match e\n    ((Lit n) n)\n    ((Add x y) (+ (eval-expr x) (eval-expr y)))\n    ((Mul x y) (* (eval-expr x) (eval-expr y)))\n    (else (error \"bad Expr\"))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:29:06.998952-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:30:02.900883-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "NHnbEzz7DQCVocTqAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It pattern-matches on the expression type and binds into variables. As an extra challenge, I also want to be able to write guard expressions:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:29:43.269345-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:29:55.111548-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Y+kEFjz7DQCYAh2zAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(match (Lit 5)\n  ((Lit n) :when (negative? n) 'neg)\n  ((Lit _) 'pos)\n  (else 'not-a-lit))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:29:45.459671-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:30:36.987426-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IVMmFjz7DQCYFYgJAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "These are arbitrary expressions that I can use for the components of my ADT."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:30:50.617851-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:31:04.363814-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "a5EIGjz7DQCaPwDlAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And that’s about it! Let’s crack our knuckles and get to work!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:31:04.862585-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:31:08.411385-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "su3hGjz7DQCbtUpsAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## An implementation"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:31:09.103813-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:09:13.251828-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LqUiGzz7DQCcHTAzAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let’s start with the ADT. For the purposes of this blog post, we will ignore all other affordances Scheme might have for us (record types and the like), and we will conjure data types out of nothing but lists."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:40:52.273368-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:40:56.544487-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "RhrlPTz7DQCDPlHSAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Defining ADTs"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:32:17.819062-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:41:21.435664-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jiQ7Hzz7DQChU3sFAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define-syntax defadt\n  (syntax-rules ()\n    ((_ Name) (begin))\n    ((_ Name (Ctor field ...) rest ...)\n     ; what do we do here?\n     ))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:32:53.134905-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:35:26.416334-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "uwdWITz7DQCiYP/jAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "First we define a based case for our macro, since it will be recursive. Then we define the head clause of our main rule, where we take one of the constructors. What do we do with it, though? We need to at least define a function named after the constructor that constructs the data type, and probably also a function that checks for the data type. Taking our example from above and the `Lit` expression that takes a literal, we would define `(Lit <n>)` and `(Lit? <to-check>)`, then go to our next constructor. So, let’s do just that:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:35:28.749631-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:41:18.710228-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0YWcKjz7DQCuZ3rIAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define-syntax defadt\n  (syntax-rules ()\n    ((_ Name) (begin))\n    ((_ Name (Ctor field ...) rest ...)\n     (begin\n       (define (Ctor field ...) (cons 'Ctor (list field ...)))\n       (eval (macro-expand\n       \t`(define (,(string->symbol (++ (symbol->string 'Ctor) \"?\")) v)\n       \t\t(and (list? v) (eq? (car v) ','Ctor))))\n       \t(current-env))\n       (defadt Name rest ...)))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:36:12.146577-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:08:46.476708-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "DLUyLTz7DQCu/HHiAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This is a bit ugly, mostly due to me forgetting most of how I do things in zepto. The first definition is easy, it literally just makes a function that takes all the fields and puts them in a list that we then tag with the name of the type, such that `(Lit 5)` would end up being encoded as `'(Lit 5)`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:38:03.987841-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:40:22.42096-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "tkHdMzz7DQC3cBv/AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So far, so good. The second definition is what I am not quite happy with, since it calls `macro-expand` and `eval` manually, a sign that we don’t know how to do something. My problem here was that I needed to construct the symbol `ConstructorName + ?` and splice that in the definition, and I forgot how to do it. In the end, the check is literally just a check whether we have a list and whether the constructor name is the first argument. Good enough for us."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:40:23.477843-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:40:46.487993-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "rbgtPDz7DQCA4xNSAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We then recurse, removing the first constructor, such that we eventually reach the empty base case."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:40:47.297261-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:41:05.790046-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "PS2ZPTz7DQCDMI9RAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Matching ADTs"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:41:06.654813-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:42:28.909885-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "E4nAPjz7DQCD9gHaAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The meat of our definition lies in the matcher, however. Let’s build a skeleton as before."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:42:29.958407-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:47:11.965461-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aKm3Qzz7DQCGAj61AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define-syntax match\n  (syntax-rules (:when else)\n    ((_ e (else body ...)) (begin body ...))\n    ((_ e ((Ctor vars ...) :when g body ...) rest ...)\n       ; match with guard\n       )\n    ((_ e ((Ctor vars ...) body ...) rest ...)\n       ; match without guard\n       )\n    ((_ e) (error \"match: no clause matched\"))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:44:13.737199-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:45:37.797355-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IxxDRjz7DQCHN++7AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We define a `match` macro with the special keywords `else` and `:when`. The `else` clause is easy, it just unconditionally executes the body. Likewise, a matcher without anything will just error. The complicated branches are the ones that actually do the matching, with or without guard."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:45:45.448304-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:46:16.747835-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Sb7yTjz7DQCOPoofAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We will need recursion once more, and we will start with the slightly simpler matcher without guard expression:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:46:19.512119-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:46:57.868788-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7l5mUTz7DQCR8wc4AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define-syntax match\n  (syntax-rules (:when else)\n    ((_ e (else body ...)) (begin body ...))\n    ((_ e ((Ctor vars ...) :when g body ...) rest ...)\n     ; with guard\n     )\n    ((_ e ((Ctor vars ...) body ...) rest ...)\n     (let ((tmp e))\n       (if (and (list? tmp) (eq? (car tmp) 'Ctor))\n           (apply (lambda (vars ...) body ...)\n                  (cdr tmp))\n           (match tmp rest ...))))\n    ((_ e) (error \"match: no clause matched\"))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:47:16.253266-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:49:16.344181-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "iSjIVDz7DQCTHrznAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Oof, that’s a handful. So first we create a temporary variable for our matchable expression (this makes sure that it gets evaluated once, not multiple times). We then check if it quacks like a duck (it is a correctly tagged list), and if so, we apply the value to an anonymous function that’s made up of the match variables and body."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:49:18.048027-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:49:25.258598-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ETqYWzz7DQCaSFIOAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let’s go through an illustrative example:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:52:44.333564-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:53:44.889121-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "e0ZWaDz7DQCfkeZZAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(match (Lit 5)\n  ((Lit x) (* x 5)))\n  \n ; expands to (partial expansion before let etc)\n \n (let ((tmp (Lit 5)))\n \t(if (and (list? tmp) (eq? (car tmp) 'Lit))\n \t\t(apply (lambda (x) (* x 5)) '(5))\n \t\t(error \"match: no clause matched\")))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:53:47.607408-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:54:35.416404-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4MIbbDz7DQChLHDSAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "You can also play around with it using `macro-expand` on your own time, but be warned: `let` and `and` are also macros, and the expanded expression is actually a bit more complicated!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:57:11.536663-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:57:21.682727-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "nnlDeDz7DQCk79kQAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The guarded clause is only slightly more complicated."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:54:36.334526-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:57:45.651808-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "PUgDbzz7DQCk3MdeAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(define-syntax match\n  (syntax-rules (:when else)\n    ((_ e (else body ...)) (begin body ...))\n    ((_ e ((Ctor vars ...) :when g body ...) rest ...)\n     (let ((tmp e))\n       (if (and (list? tmp) (eq? (car tmp) 'Ctor))\n           (apply (lambda (vars ...)\n                     (if g\n                       (begin body ...)\n                       (match tmp rest ...)))\n                  (cdr tmp))\n           (match tmp rest ...))))\n    ((_ e ((Ctor vars ...) body ...) rest ...)\n     ; without guard\n    ((_ e) (error \"match: no clause matched\"))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:57:50.696665-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:58:30.908096-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "WwKZejz7DQCm51gIAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It essentially does the same thing, but has an `if` clause inside the `lambda` that will go to the rest of the match if the clause doesn’t hold."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:58:36.142337-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:59:29.694876-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "oXROfTz7DQCqjPy1AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Why there and not in the outside `if`? We need access to the bound variables, and we only have that inside of the `lambda` expression. The generated code will be quite ugly, but we do not really care, since noone should ever need to see it."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:59:30.943475-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:59:44.87426-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "y6eSgDz7DQCv0QYyAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And that’s it! We’ve implemented a full ADT and pattern matcher."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:59:45.352643-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:59:51.680387-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "M4ZugTz7DQCxZTv+AbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Next steps and exercises"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T12:59:52.669925-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:00:04.478037-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "5yzegTz7DQCx4WSMAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "A few potential next steps could be:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:00:05.267652-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:10:44.491418-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "UGeegjz7DQCzEQqjAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- Add a function that checks for the main algebraic data type (i.e. `Expr?`). This requires fiddling a bit with the recursion scheme in the macro.\n- Unify the guarded and unguarded macro clauses. This requires rewriting the macro form to funnel one style into the other (probably unguarded into guarded using a `:when true` form).\n- Add exhaustiveness checks in the `match` macro.\n- Add nested destructuring for `match`."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:02:45.245851-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:03:11.007829-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GnknjDz7DQC7/AHRAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "There are even more things you could spend time on, like `let`-style destructuring and the like. The possibilities are endless!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:03:12.147099-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:03:14.122581-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4PPBjTz7DQC+o0EXAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Fin"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:03:14.547819-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:03:40.698689-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "7ZXmjTz7DQC+xRcSAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In this blog post, we implemented full ADT support and pattern matching in two macros and under 30 lines of code. Not too shabby, right?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:03:41.460393-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-15T13:04:09.212829-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ETuBjzz7DQCBsjqhAbCJpA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let me know if you want me to revive this series, I have a few more idea for funky macros up my sleeve!"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-15T12:21:22.302044-05:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-15T12:21:22.302044-05:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Scheme Macros IX: Algebraic Data Types"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "bfbe35f7-3bfb-0d00-b8cd-596901b089a4"
	}
}