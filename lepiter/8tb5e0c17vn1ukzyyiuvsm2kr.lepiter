{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T13:34:45.725748-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T13:36:32.182205-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "S+411HP6DQCziJuoB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Hello, friend! In case you are new here, this is a series about building six different Sudoku solvers in six different programming languages. [Check the first part](./Six_Simple_Sudoku_Solvers_I:_Python_(Reference).html) for more information on the algorithm as well as a reference implementation."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T13:36:32.849206-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:07:33.290091-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "un+Y2nP6DQC58lizB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "In this istallment we will focus on an implementation in Common Lisp using the SBCL runtime, which is the one I am most familiar with. The dialects are not very far from each other, but the deeper you go into the stack, the more little hang-ups you will have, so I recommend following along using SBCL rather than another Common Lisp runtime."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:07:33.970507-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:11:19.965938-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LfSGSXT6DQCBEk1DB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "What I want to show in this solver are how the uniqueness of Lisp macros helps explore the problem space—naturally—, but also how an advanced Common Lisp runtime allows the user to optimize things tremendously when needed without losing that expressive power."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:11:20.61563-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:11:25.695163-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "b0kJV3T6DQCIDzqFB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Let’s dive right in!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:11:26.307845-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:12:04.2418-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "hyRgV3T6DQCIgcX0B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Why Common Lisp?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:12:04.661761-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:13:25.295882-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "dGCpWXT6DQCI5FUpB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I have a bit of a bias towards the Lisps and Smalltalks of the planet. Putting that aside, I do think it’s very instructive to see how a \"high level\" language with very many abstractions can still get very nitty gritty and optimized when the need arises, and how a good runtime encapsulates this such that it doesn’t feel like an escape hatch to a quasi-FFI."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:13:25.570397-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:13:28.831338-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "svB7XnT6DQCQctgWB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And I like macros."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:13:31.90148-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:13:58.242957-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QYzcXnT6DQCQ0N7DB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## The implementation"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:13:58.599347-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:14:35.563194-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Nu1zYHT6DQCRb3yMB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Okay, I’ll explain less about the solver’s algorithm this time. If you need a refresher, refer to the first part and check what we did there."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:19:43.936042-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:04.897106-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "3FQJdXT6DQCZbiOwB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I’ll also hide a few functions that are only there for housekeeping (like copying boards, etc.). If you want to see them, check out [the repository](https://github.com/hellerve/sudoku). The full algorithm is around 130 lines with a Sudoku puzzles baked in, despite our best efforts to optimize the heck out of it."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:36:58.096089-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:38:34.407229-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "RFytsnT6DQCCq9T3B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### A primer on bitmasks"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:37:05.338118-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:38:40.61516-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "p+Abs3T6DQCDLBafB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I know I promised that every time we’d work with a two-dimensional arrays of numbers, and strictly speaking, that is what I plug into the main solver, but by the time it reaches `solve`, we’ve already transformed it into a grid of bitmasks inside typed arrays instead."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:38:41.355876-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:40:22.27417-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Gv7UuHT6DQCIcXOmB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This is primarily an optimization. The board is a tiny grid, and our digits 1-9 can fit into 9 bits in a mask (yes, 4 bits if we used tightly packed numbers, but then the cost of our operations would go up)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:40:22.777314-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:41:47.93805-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Oo3gvnT6DQCNhF0sB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Instead, we can use a specialized array type of the shape `(simple-array (unsigned-byte 4) (9 9))`. In SBCL, specialized arrays are contiguous and unboxed, so indexing is fast and cache-friendly. It will likely pack into bytes, not bits, but that’s already quite good."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:41:48.629601-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:43:21.463174-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "BpH+w3T6DQCRJKGdB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Now, what do we use the mask for? Well, instead of using a set of up to 9 members, we just use a set of 9 bits that we can turn off and on individually to mark whether a candidate is in the set or not. We can then implement all set operations as a single expression of very few mathematical operations:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:43:23.087014-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:45:54.585313-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qd2fyXT6DQCYYhncB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "- Set addition becomes: `mask = mask | (1 << (digit - 1))`\n- Set union becomes: `mask | othermask`\n- Size becomes: `bitcount mask`"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:46:08.921515-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:46:39.455464-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "+bex0nT6DQCb1f15B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The rest can be encapsulated in macros so that the user won’t even notice much (you’ll get a taste of that below)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:09.804941-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:10.157018-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "W5gnenT6DQCgL5xXB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Prologue"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:13.29188-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:13.511579-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "ocpcenT6DQCgPQvsB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Before we start, a bit of ceremony."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:16.817528-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:17.03475-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IpaSenT6DQCgS+9EB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(declaim (optimize (speed 3) (safety 0) (debug 0)))\n\n(deftype cell () '(unsigned-byte 4))\n(deftype mask () '(unsigned-byte 16))\n(defconstant +digits+ #b111111111)\n\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:23.103418-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:23.278159-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TYLyenT6DQCgcU77B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This tells the compiler to optimize for speed and throw everything else out of the window, as well as defining some types. Already we’re looking at bits, so you know it’ll be good!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:14:36.915256-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:14:42.475544-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "uJS8YnT6DQCUNPgxB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### The solver"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:14:46.022652-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:49.435612-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "s4hHY3T6DQCUfku7B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As before, we will go over the high level solver function first."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:21:43.260943-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:23:14.354359-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "UxgmfHT6DQChzRuwB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defun solve (b)\n  (unless (propagate b) (return-from solve nil))\n\n  (when (solved-p b) (return-from solve b))\n\n  (multiple-value-bind (i j m) (find-mrv b)\n    (when (null i) (return-from solve nil))\n    (do-set-bits (d m)\n      (let ((nb (copy-board b)))\n        (setf (cell nb i j) d)\n        (when-let (res (solve nb))\n          (return-from solve res))))\n    nil))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:22:53.257714-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:24:28.063381-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4yhSgHT6DQCitzyHB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Yes, yes, I know that’s a lot of parentheses, let’s try to move past it. At a first glance, there isn’t that much difference from our reference implementation. We do that weird `do-set-bits` thing, though. What is that?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:24:31.057922-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:24:43.1448-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "qngmhnT6DQCnsOU7B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro do-set-bits ((d m) &body body)\n  (let ((mm (gensym \"MM\")) (lb (gensym \"LB\")))\n    `(do ((,mm ,m (logand ,mm (1- ,mm)))) ((zerop ,mm))\n       (let* ((,lb (logand ,mm (- ,mm)))\n              (,d  (integer-length ,lb))) ,@body))))\n\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:24:46.087615-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:25:03.47552-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "es4Lh3T6DQCn4cbJB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "HOLY COW! What in the world is this?"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:25:05.902805-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:47:33.686733-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Yyo6iHT6DQCoraSKB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Well, as we explained above in this solution we are working with bitmasks to represent our candidates. As such, we need a different way to iterate over them than the loop we had in our reference implementation. We could just write a loop, something like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:28:57.396825-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:29:13.693754-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "k3gGlnT6DQCuLmlAB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(loop for d from 1 to 9\n  when (logbitp (1- d) m) do\n  ; do something to d\n )\n ```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:29:18.23297-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:30:35.266183-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TyUMl3T6DQCu5uv7B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This would be roughly equivalent, but it would be slow. Instead, the macros above implements a branchless walk that is faster. Doing it without a macro would result in something like this:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:30:35.518867-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:32:09.600648-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "MrXfm3T6DQC0Eo+KB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(do ((mm m (logand mm (1- mm)))) ((zerop mm))\n       (let* ((lb (logand mm (- mm)))\n              (d  (integer-length lb))) \n\t      (let ((nb (copy-board b)))\n    \t    (setf (cell nb i j) d)\n        \t(when-let (res (solve nb))\n          \t(return-from solve res))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:32:11.24527-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:32:39.182994-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "fFeUoXT6DQC1b7XOB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "But this didn’t really spark joy to look at, so I abstracted the mathy candidate search away and put it into a macro!"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:34:01.535484-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:34:43.580265-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "gUUnqHT6DQC55H4BB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "There are a few more custom macros in that tiny bit of code (`when-let` is one of them), but they are mostly plumbing, so I’ll leave that for the purposes of this blog post."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:32:41.787457-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:33:39.565485-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IV9mo3T6DQC4G1KpB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### Propagation"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:33:39.813-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:33:56.565758-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "68/bpnT6DQC4fpv2B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Next up is propagation, aka. a single solver attempt."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:33:57.698568-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:35:16.838666-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "gbjsp3T6DQC50YhZB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defun propagate (b)\n  (do-fixpoint (changed)\n    (do-cells (i j)\n      (when (zerop (cell b i j))\n        (let ((m (candidates-mask b i j)))\n          (when (zerop m) (return-from propagate nil))\n          (when (single-bit-p m)\n            (setf (cell b i j) (mask->digit m)\n                  changed t))))))\n  t)\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:35:19.708913-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:36:20.338997-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "uBnQrHT6DQC9t8zfB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "What are `do-fixpoint` and `do-cells` here? You guessed right, more macros. I don’t think we need to explain those, though, since they just abstract away something that would otherwise distract from the code algorithm, as good macros should."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:37:24.792449-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:48:49.689435-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LvCR2Y36DQChPF2EB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Generally, not much is different from our reference implementation in Python. We go through the cells until we hit a fixpoint in the board changing (i.e. there is nothing more to fill out), we get the candidates for each cell. If any cell has no candidates, the puzzle is unsolvable, if it is set to a single bit, we know we have a solution for that cell and set the marker for another scan of the board."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:48:49.959271-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:48:56.843428-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "aMBoAo76DQCyuWSeB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "### The candidates mask"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:40:15.141068-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:40:24.167503-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "h4Nk4436DQCqvjEgB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The helpers are also mostly straightforward."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:40:26.665733-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:48:19.454516-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "lxpp5I36DQCsSBnCB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defun row-mask (b i)\n  (with-mask (m)\n    (dotimes (j 9)\n      (let ((v (cell b i j)))\n        (when (> v 0) (ior! m (digit->mask v)))))))\n\n(defun col-mask (b j)\n  (with-mask (m)\n    (dotimes (i 9)\n      (let ((v (cell b i j)))\n        (when (> v 0) (ior! m (digit->mask v)))))))\n\n(defun box-mask (b i j)\n  (with-mask (m)\n    (do-box (r c i j)\n      (let ((v (cell b r c)))\n        (when (> v 0) (ior! m (digit->mask v)))))))\n\n(defun candidates-mask (b i j)\n  (let ((v (cell b i j)))\n    (logandc2 +digits+ (logior (row-mask b i)\n                               (col-mask b j)\n                               (box-mask b i j)))))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-05T14:36:21.65765-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:49:38.020729-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "eVuBsHT6DQCCp6DHB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "This is a lot of code, but it’s pretty straightforward. The math is a little different, because we are using bitmasks, but as last time what we have to do is look at the rows, columns, and boxes. The nice thing is that this time we don’t have to play around with sets and can rely on logical operations instead."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:49:39.459435-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:50:47.648888-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "fBFcBY76DQC1v4BEB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "It looks like `with-mask` might be magic here, but remember that bitmasks are just integers, so a helper to create and return a mask just boils down to a one line macro."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:50:48.595344-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:51:00.02913-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GwJ7CY76DQC5PWzsB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro with-mask ((m) &body body) `(let ((,m 0)) ,@body ,m))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:51:07.926987-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:52:22.730151-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "4t42Co76DQC5aeHIB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Do we really need that? Possibly not, but it reduces noise that distracts from the algorithm. By just saying “build me a mask and return it” we can remove some ceremony from our mask functions and, again, focus on the algorithmically interesting sections."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:52:33.473103-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:53:00.09111-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "zckRgnT6DQCkS6siB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "More than that, however, I also use macros for little functions to ensure inlining. Some examples:"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:53:02.638306-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:55:47.289171-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "jFJ4EY76DQCDgQlgB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defmacro mask->digit (m) `(integer-length ,m))\n(defmacro digit->mask (d) `(ash 1 (1- ,d)))\n(defmacro ior! (place expr)\n\t`(setf ,place (logior ,place ,expr)))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:53:42.936418-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:54:52.085586-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "FDzfE476DQCDt4EIB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "These all could be functions, but this way I ensure things are inlined but I still retain the abstraction. This is definitely a matter of preference, but for this article I decided to go for it just to show you what is possible."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:54:12.835239-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:55:11.028593-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "nHGnFY76DQCF/2ckB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## MRV candidate selection"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:55:28.488116-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:56:53.658496-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "2yokGY76DQCJIzWiB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The only thing that is left to do is our candidate selection for depth-first search."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:56:53.951317-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:58:07.23328-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "o+RBH476DQCLm2GqB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "```\n(defun find-mrv (b)\n  (let ((best-i nil)\n        (best-j nil)\n        (best-m 0)\n        (best-k 10))\n    (do-cells (i j)\n      (when (zerop (cell b i j))\n        (let* ((m (candidates-mask b i j))\n               (k (logcount m)))\n          (when (< k best-k)\n            (setf best-k k best-i i best-j j best-m m)))))\n    (values best-i best-j best-m)))\n```"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:57:06.309876-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T20:59:55.432465-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "OHX+H476DQCLx0UZB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "All we do is go through all cells, collect the number of candidates for all cells that are still `0`, and return the index with the lowest number. It’s probably the most imperative and straightforward bit of code (I’ll be honest, I got a little tired of trying to be clever and elegant)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:00:00.02637-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:02:28.159196-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "YytZKo76DQCR6LGnB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "The thing is, even if Common Lisp—rightfully or not—has this reputation of attracting people with a predilection for being clever, you really don’t have to be. You can write straightforward functional or imperative code if you want to, and the compiler will do a decent job of compiling either into reasonable instructions. There are facilities to be really inventive when you need to—or when the mood strikes—, but this isn’t always necessary or advisable."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:02:30.486265-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:02:42.251023-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "TgJRM476DQCcHng6B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Fin"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:06:32.00966-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:06:32.00966-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "QFy2QY76DQCgm5TeB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "And there we have it! A sudoku solver in Common Lisp that might defy a few prejudices you might hold, apart from the parentheses."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:02:42.484795-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:08:13.976307-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "lRQINI76DQCcSiyiB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We wrote some mathy bit-twiddling code, admittedly macro-heavy, and we produced some reasonable machine code (load the file and call `disassemble` on any of the symbols to check it out!)."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:09:18.552163-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:11:34.862596-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "PKxCSo76DQCjvJe2B7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I want you to walk away with two main points: firstly, that representing known small-to-medium sized candidate  sets as bitmasks might be worth it if performance is extremely important. Secondly, that macros, whether it’s in Common Lisp or any other language, do not need to be used to write DSLs. Often, they can just be a handy tool to remove parts of the code that distract from your ideas, or even as an optimization technique."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:11:37.313929-05:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-09-06T21:12:30.379732-05:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "c+voU476DQCvpUqfB7nhlA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "See you next time for the opposite end of the abstraction ladder when we will look at Prolog and rely on a system designed to backtrack and solve constraints to solve all our problems for us!"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-05T13:34:58.041199-05:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-09-05T13:35:02.401011-05:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Six Simple Sudoku Solvers II: Common Lisp"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "8b8e35d4-73fa-0d00-b387-148207b9e194"
	}
}